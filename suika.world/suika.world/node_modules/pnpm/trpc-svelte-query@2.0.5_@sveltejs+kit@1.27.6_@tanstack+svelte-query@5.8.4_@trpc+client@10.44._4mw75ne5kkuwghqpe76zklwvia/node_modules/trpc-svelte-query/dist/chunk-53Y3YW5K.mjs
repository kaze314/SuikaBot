import {
  getArrayQueryKey
} from "./chunk-E5VPA7AK.mjs";

// src/shared/utils.ts
import {
  useQueryClient
} from "@tanstack/svelte-query";
import { BROWSER } from "esm-env";

// src/utils/splitUserOptions.ts
function splitUserOptions(options) {
  if (options === void 0) {
    return [];
  }
  const trpcOptions = {
    context: options.context,
    signal: options.signal
  };
  delete options.context;
  delete options.signal;
  return [options, trpcOptions];
}

// src/shared/utils.ts
var queryTypes = {
  invalidate: "any",
  prefetch: "query",
  prefetchInfinite: "infinite",
  fetch: "query",
  fetchInfinite: "infinite",
  refetch: "any",
  cancel: "any",
  reset: "any",
  setData: "query",
  setInfiniteData: "infinite",
  getData: "query",
  getInfiniteData: "infinite"
};
function callUtilMethod(trpc, client, path, method, args) {
  if (!BROWSER) {
    client = useQueryClient();
  }
  const queryType = queryTypes[method];
  const queryKey = getArrayQueryKey(path, args[0], queryType);
  const getFilters = () => {
    const filters = args[1] ?? {};
    filters.queryKey = queryKey;
    return filters;
  };
  switch (method) {
    case "prefetch":
    case "fetch":
    case "prefetchInfinite":
    case "fetchInfinite": {
      const joinedPath = path.join(".");
      const options = args[1];
      const [trpcOptions, tanstackQueryOptions] = splitUserOptions(options);
      const queryFn = queryType === "query" ? () => trpc.query(joinedPath, args[0], trpcOptions) : (context) => {
        const input = { ...args[0], cursor: context.pageParam };
        return trpc.query(joinedPath, input, trpcOptions);
      };
      return client[method + "Query"]({
        ...tanstackQueryOptions,
        queryKey,
        queryFn
      });
    }
    case "invalidate":
      return client.invalidateQueries(getFilters(), args[2]);
    case "refetch":
      return client.refetchQueries(getFilters(), args[2]);
    case "cancel":
      return client.cancelQueries(getFilters(), args[2]);
    case "reset":
      return client.resetQueries(getFilters(), args[2]);
    case "setData":
    case "setInfiniteData":
      return client.setQueryData(queryKey, args[1], args[2]);
    case "getData":
    case "getInfiniteData":
      return client.getQueryData(queryKey);
    default:
      throw new TypeError(`trpc.${path}.${method} is not a function`);
  }
}

export {
  splitUserOptions,
  callUtilMethod
};
